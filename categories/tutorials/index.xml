<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on techStop</title>
    <link>https://techstop.github.io/categories/tutorials/</link>
    <description>Recent content in Tutorials on techStop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2019 22:28:51 -0400</lastBuildDate><atom:link href="https://techstop.github.io/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get CPU and GPU Temps in Linux</title>
      <link>https://techstop.github.io/get-cpu-gpu-temps-linux/</link>
      <pubDate>Wed, 13 Nov 2019 22:28:51 -0400</pubDate>
      
      <guid>https://techstop.github.io/get-cpu-gpu-temps-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/sensors1.png&#34; alt=&#34;Get CPU and GPU Temps in Linux&#34; title=&#34;Get CPU and GPU Temps in Linux&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;To get CPU and GPU temps in linux you need to install and configure lm-sensors. With lm-sensors you can monitor cpu and gpu temperatures and fan speeds as well as voltages for some systems. Lm-sensors reads the available sensors on your motherboard, cpu, and gpu and displays their output. Once configured, you can use the command line or a GUI to monitor your system&amp;rsquo;s sensors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fix Screen Tearing in Xfce</title>
      <link>https://techstop.github.io/fix-screen-tearing-xfce/</link>
      <pubDate>Sat, 09 Nov 2019 23:57:17 -0400</pubDate>
      
      <guid>https://techstop.github.io/fix-screen-tearing-xfce/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/scrt0.png&#34; alt=&#34;Fix Screen Tearing in Xfce&#34; title=&#34;Fix Screen Tearing in Xfce&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Xubuntu has always been one of my favorite distros, but it has always been plagued by the dreaded screen tearing because of the Xfce desktop environment. Screen tearing is when the GPU is out of sync with the display which causes artifacting and looks like tears between the top and bottom halves of your screen. This can be rather annoying, but luckily there&amp;rsquo;s easy ways to fix screen tearing in Xfce.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Install a Global App Menu in Xubuntu 18.04</title>
      <link>https://techstop.github.io/install-global-app-menu-xubuntu/</link>
      <pubDate>Thu, 31 Oct 2019 22:07:03 -0400</pubDate>
      
      <guid>https://techstop.github.io/install-global-app-menu-xubuntu/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/gm1.png&#34; alt=&#34;Install a Global App Menu on Xubuntu 18.04&#34; title=&#34;Install a Global App Menu on Xubuntu 18.04&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;If you ever used ubuntu when it still used the unity desktop, chances are you liked the unity global app menu and would like to have it on Xubuntu 18.04. Hate it or love it, ubuntu did some things really well when it used unity, like the HUD and the Global App Menu. Luckily, we don&amp;rsquo;t need unity to install a global app menu in Xubuntu 18.04.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Upgrade Kept Back Packages in Linux</title>
      <link>https://techstop.github.io/upgrade-kept-back-packages/</link>
      <pubDate>Tue, 29 Oct 2019 20:53:17 -0400</pubDate>
      
      <guid>https://techstop.github.io/upgrade-kept-back-packages/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/kept.png&#34; alt=&#34;Upgrade Kept Back Packages in Linux&#34; title=&#34;Upgrade Kept Back Packages in Linux&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Occasionally when updating your linux system from a terminal, you&amp;rsquo;ll notice a warning stating &amp;ldquo;The following packages have been kept back&amp;rdquo;. This means that when updating, those packages will not be upgraded. Today we&amp;rsquo;ll look at how to upgrade kept back packages in linux.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Remove Orphaned Packages in Linux</title>
      <link>https://techstop.github.io/remove-orphaned-packages-linux/</link>
      <pubDate>Sun, 27 Oct 2019 23:13:47 -0400</pubDate>
      
      <guid>https://techstop.github.io/remove-orphaned-packages-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/orph0.png&#34; alt=&#34;Remove Orphaned Packages in Linux&#34; title=&#34;Remove Orphaned Packages in Linux&#34;  width=&#34;90px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;There are a couple of tools to remove orphaned packages in linux. Packages in linux systems depend on other packages or libraries in order to work properly. In some cases you will already have some or all the dependencies installed from them being installed by other packages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Aliases</title>
      <link>https://techstop.github.io/bash-aliases/</link>
      <pubDate>Fri, 25 Oct 2019 05:14:48 -0400</pubDate>
      
      <guid>https://techstop.github.io/bash-aliases/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/alias.png&#34; alt=&#34;Bash Aliases&#34; title=&#34;Bash Aliases&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with bash aliases I highly recommend you read on. Bash aliases are fantastic for saving time and not having to remember commands or groups of commands.&lt;/p&gt;
&lt;p&gt;A bash alias is just a shortcut that you can set to be a word or even a single letter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clear or Reset Terminal</title>
      <link>https://techstop.github.io/clear-reset-terminal/</link>
      <pubDate>Tue, 22 Oct 2019 23:01:23 -0400</pubDate>
      
      <guid>https://techstop.github.io/clear-reset-terminal/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/crt.png&#34; alt=&#34;Clear or Reset Terminal&#34; title=&#34;Clear or Reset Terminal&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Whenever you&amp;rsquo;re using the terminal extensively you may find your terminal cluttered with commands and output. This can be rather annoying and even confusing at times with the bash prompt at the bottom of your terminal screen. The solution to this is to clear or reset terminal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Check Linux OS Version in Terminal</title>
      <link>https://techstop.github.io/linux-os-version-terminal/</link>
      <pubDate>Mon, 21 Oct 2019 20:29:00 -0400</pubDate>
      
      <guid>https://techstop.github.io/linux-os-version-terminal/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/osv.png&#34; alt=&#34;Check Linux OS Version in Terminal&#34; title=&#34;Check Linux OS Version in Terminal&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;There are a few ways to check your kernel and linux os version, but today we will cover some commands to do this in a terminal.&lt;/p&gt;
&lt;p&gt;Knowing how to check your kernel and linux os version in a terminal can be useful if you ever need help in a forum where they might ask for this information. You can also use this info in a bash script to determine what actions to take in your script based on the kernel and linux os version. Whatever the case may be, it&amp;rsquo;s a good idea to get familiar with these commands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Update Linux in a Terminal</title>
      <link>https://techstop.github.io/update-linux-terminal/</link>
      <pubDate>Sun, 20 Oct 2019 22:44:45 -0400</pubDate>
      
      <guid>https://techstop.github.io/update-linux-terminal/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/apt.png&#34; alt=&#34;Update Linux in a Terminal&#34; title=&#34;Update Linux in a Terminal&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Keeping linux updated is a simple hassle free task, unlike that other OS. On linux you can use a GUI app or update in a terminal. Both methods achieve the same result, but users usually have a preference. For me that&amp;rsquo;s the terminal.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Time a Command in Linux</title>
      <link>https://techstop.github.io/time-command-linux/</link>
      <pubDate>Sat, 19 Oct 2019 22:19:55 -0400</pubDate>
      
      <guid>https://techstop.github.io/time-command-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/time.png&#34; alt=&#34;Time a Command in Linux&#34; title=&#34;Time a Command in Linux&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Getting familiar with timing commands in linux is a good idea. This is a good way to time long operations in a bash script or from the terminal. You can time most commands and any bash script. My favorite use case is for timing source code compilation from build scripts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redirect and Append to a File in Linux</title>
      <link>https://techstop.github.io/redirect-append-to-file/</link>
      <pubDate>Fri, 18 Oct 2019 21:30:46 -0400</pubDate>
      
      <guid>https://techstop.github.io/redirect-append-to-file/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/redirect.png&#34; alt=&#34;Redirect and Append to a File in Linux&#34; title=&#34;Redirect and Append to a File in Linux&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;On every linux system you can redirect and append to the end of a file.&lt;/p&gt;
&lt;p&gt;Linux has &amp;ldquo;stdout&amp;rdquo; which stands for &amp;ldquo;standard output&amp;rdquo;. Whenever you run a command in your terminal, the result is displayed in the stdout. You can redirect and append stdout to the end of a file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Exit Status</title>
      <link>https://techstop.github.io/bash-exit-status/</link>
      <pubDate>Tue, 15 Oct 2019 22:13:36 -0400</pubDate>
      
      <guid>https://techstop.github.io/bash-exit-status/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/stat.png&#34; alt=&#34;Bash Exit Status&#34; title=&#34;Bash Exit Status&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Regardless of whether a bash command ends successfully or not, it returns an exit status. Aside from letting you know that the command succeeded or failed, you can use the exit status code in bash scripts to determine what action to take with a conditional statement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rename Files &amp; Folders Linux Command Line</title>
      <link>https://techstop.github.io/rename-files-folders-linux/</link>
      <pubDate>Mon, 14 Oct 2019 20:00:29 -0400</pubDate>
      
      <guid>https://techstop.github.io/rename-files-folders-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/mv.png&#34; alt=&#34;Rename Files &amp;amp; Folders Linux Command Line&#34; title=&#34;Rename Files &amp;amp; Folders Linux Command Line&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Lets take a look at how to rename files and folders in linux from the command line.&lt;/p&gt;
&lt;p&gt;Sure you can use your GUI and be done with it, but learning to do it from the command line can be quite useful. There&amp;rsquo;s also the added benefit of being able to use these commands in bash scripts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Remove Unused Kernels Ubuntu 18.04</title>
      <link>https://techstop.github.io/ubuntu-unused-kernels/</link>
      <pubDate>Sat, 12 Oct 2019 22:01:52 -0400</pubDate>
      
      <guid>https://techstop.github.io/ubuntu-unused-kernels/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/lh2.png&#34; alt=&#34;Remove Unused Kernels Ubuntu 18.04&#34; title=&#34;Remove Unused Kernels Ubuntu 18.04&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;A question often asked&amp;hellip; How do I remove old unused kernels from ubuntu 18.04?&lt;/p&gt;
&lt;p&gt;Each time you receive a kernel update in your ubuntu 18.04 system updates, you end up with the old kernels remaining in your system. This can be useful in the event that the new kernel causes issues, you can always boot the old kernels. In time, old unused kernels can accumulate taking up unnecessary space on your drive.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash Arrays</title>
      <link>https://techstop.github.io/bash-arrays/</link>
      <pubDate>Tue, 08 Oct 2019 20:09:14 -0400</pubDate>
      
      <guid>https://techstop.github.io/bash-arrays/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/array.png&#34; alt=&#34;Bash Arrays&#34; title=&#34;Bash Arrays&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Bash arrays are quite powerful and robust, but not often used in the command line. They are variables which contain multiple values often referred to as items or elements. Arrays do not have a maximum limit for items they can contain nor do the values need to be assigned or indexed contiguously.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Check If Directory Exists In Linux With Bash</title>
      <link>https://techstop.github.io/directory-exists-bash/</link>
      <pubDate>Sat, 05 Oct 2019 03:30:20 -0400</pubDate>
      
      <guid>https://techstop.github.io/directory-exists-bash/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/dir.png&#34; alt=&#34;Check If Directory Exists In Linux With Bash&#34; title=&#34;Check If Directory Exists In Linux With Bash&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;It&amp;rsquo;s useful to know how to check if a directory exists in linux from a bash script. A directory is a folder within a path in your linux system where all sorts of files and directories are stored. Your Music folder is a directory to store music files and your Downloads folder is a directory where all sorts files are downloaded from the web. You get the idea.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Colors In Bash Scripts</title>
      <link>https://techstop.github.io/bash-script-colors/</link>
      <pubDate>Thu, 03 Oct 2019 22:17:26 -0400</pubDate>
      
      <guid>https://techstop.github.io/bash-script-colors/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/ansi.png&#34; alt=&#34;Colors In Bash Scripts&#34; title=&#34;Colors In Bash Scripts&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Using colors in bash scripts can be very useful. If you&amp;rsquo;ve written your bash script with menus and prompts, it&amp;rsquo;s a good idea to use ansi color codes to make your outputs more readable to the user. In this tutorial I&amp;rsquo;ll cover some ways that you can use colors in your bash scripts for a more GUI like experience.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create a Menu in a Bash Script</title>
      <link>https://techstop.github.io/menu-bash-script/</link>
      <pubDate>Wed, 02 Oct 2019 20:46:44 -0400</pubDate>
      
      <guid>https://techstop.github.io/menu-bash-script/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/menu.png&#34; alt=&#34;Create a Menu in Bash Script&#34; title=&#34;Create a Menu in Bash Script&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Creating a menu in a bash script can be quite useful and at times necessary. A bash menu can allow you to provide options for user input. Upon user selection of an option in your menu, you can run a command or sequence of commands and display outputs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Write Bash Functions</title>
      <link>https://techstop.github.io/bash-functions/</link>
      <pubDate>Mon, 30 Sep 2019 21:38:41 -0400</pubDate>
      
      <guid>https://techstop.github.io/bash-functions/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/func.png&#34; alt=&#34;Writing Bash Functions&#34; title=&#34;Writing Bash Functions&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Writing bash functions is a great way to make your scripts modular. If you find you&amp;rsquo;ll be needing to repeat sets of commands or code logic, it&amp;rsquo;s a good idea to use functions to avoid redundancy in your script. Bash functions also help keep your code neat and easier to maintain.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Commands To Get Hardware Info</title>
      <link>https://techstop.github.io/linux-commands-hardware-info/</link>
      <pubDate>Fri, 27 Sep 2019 23:29:38 -0400</pubDate>
      
      <guid>https://techstop.github.io/linux-commands-hardware-info/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/inxi.png&#34; alt=&#34;Linux commands for hardware info&#34; title=&#34;Linux commands for hardware info&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;It&amp;rsquo;s always a good idea to know how to get hardware info on your linux system. It can be very useful if you need to troubleshoot a hardware issue. There can be times when you need some specific hardware info to get the right drivers. Other times you&amp;rsquo;ll need specific info to perform a hardware upgrade. The command line offers quite a few ways to obtain this hardware info with some tried and true linux commands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Detect Android Wakelocks</title>
      <link>https://techstop.github.io/detect-android-wakelocks/</link>
      <pubDate>Mon, 23 Sep 2019 19:45:09 -0400</pubDate>
      
      <guid>https://techstop.github.io/detect-android-wakelocks/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/wake-1.png&#34; alt=&#34;Android Wakelocks&#34; title=&#34;Android Wakelocks&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
 &lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/wake-2.png&#34; alt=&#34;Android Wakelocks&#34; title=&#34;Android Wakelocks&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re noticing that your android device is suddenly draining battery quicker than normal, it can be due to an android wakelock. Once you know the quick battery drain is not due to a faulty battery, you&amp;rsquo;ll need to detect what&amp;rsquo;s causing the wakelock. This is likely a misbehaving app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Manipulate Text in Files With Sed</title>
      <link>https://techstop.github.io/manipulate-text-files-sed/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://techstop.github.io/manipulate-text-files-sed/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/sed.png&#34; alt=&#34;Sed Text Stream Editor&#34; title=&#34;Sed Text Stream Editor&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;The sed linux utility is a powerful stream editor. Sed can manipulate text from standard input or from a file. It is much like a typical text editor. Where sed sets itself apart is in its ability to filter text in a pipeline to expand its capabilities.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create A Desktop Launcher In Linux</title>
      <link>https://techstop.github.io/create-desktop-launcher-linux/</link>
      <pubDate>Wed, 18 Sep 2019 12:36:21 -0400</pubDate>
      
      <guid>https://techstop.github.io/create-desktop-launcher-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/desktop-launcher.png&#34; alt=&#34;Desktop Launcher File&#34; title=&#34;Desktop Launcher File&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;There may be times when you will need to create a &lt;strong&gt;.desktop&lt;/strong&gt; launcher file in linux. The desktop file is a shortcut to an application for launching it. This desktop file adds a launcher to your applications menu and can also be placed in docks or anywhere you&amp;rsquo;d like.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create Bootable Usb With Terminal in Linux</title>
      <link>https://techstop.github.io/create-bootable-usb-with-terminal-in-linux/</link>
      <pubDate>Sun, 15 Sep 2019 19:19:16 -0400</pubDate>
      
      <guid>https://techstop.github.io/create-bootable-usb-with-terminal-in-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/dd0.png&#34; alt=&#34;dd&#34; title=&#34;dd&#34;  width=&#34;200px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;If you&amp;rsquo;re installing linux, like to distro hop, or simply test different linux distros, you&amp;rsquo;ll often be creating a live bootable usb. There are a few ways to create a bootable usb in linux. Many distros have Startup Disk Creator(usb-creator-gtk) pre-installed which usually gets the job done. There is the rare occasion when using a GUI app just doesn&amp;rsquo;t work. For these rare occasions the dd linux command line utility never fails. This is my preferred method and the one I&amp;rsquo;ll cover in this tutorial.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Move Chrome Cache Location in Linux</title>
      <link>https://techstop.github.io/move-chrome-cache-location-in-linux/</link>
      <pubDate>Sat, 14 Sep 2019 14:00:13 -0400</pubDate>
      
      <guid>https://techstop.github.io/move-chrome-cache-location-in-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/chrome/chrome.png&#34; alt=&#34;Chrome Browser&#34; title=&#34;Chrome Browser&#34;  width=&#34;200px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Often times users may want to move the chrome cache location for whatever reason. If you’re like me and have a primary SSD for your operating system and a secondary HDD for storage, then you may want to move the chrome cache location to another drive to reduce writes to your SSD. Reducing heavy caching to your SSD can prolong its lifespan.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Make Xfce Look Modern</title>
      <link>https://techstop.github.io/make-xfce-look-modern/</link>
      <pubDate>Thu, 12 Sep 2019 14:06:22 -0400</pubDate>
      
      <guid>https://techstop.github.io/make-xfce-look-modern/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/xf0.png&#34; alt=&#34;xfce&#34; title=&#34;xfce&#34;  width=&#34;120px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
 &lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/xf1.png&#34; alt=&#34;xfce&#34; title=&#34;xfce&#34;  width=&#34;120px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
 &lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/xf2.png&#34; alt=&#34;xfce&#34; title=&#34;xfce&#34;  width=&#34;120px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Xfce is a lightweight and powerful desktop environment(DE) that&amp;rsquo;s been around for a long time. It&amp;rsquo;s considered one of the most stable and lightest DEs around. Xfce has a traditional layout well suited for users of all types, from the new user coming from Windows to the power user looking to get things done efficiently.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pause and Resume Wget Downloads</title>
      <link>https://techstop.github.io/pause-and-resume-wget-downloads/</link>
      <pubDate>Mon, 09 Sep 2019 20:20:55 -0400</pubDate>
      
      <guid>https://techstop.github.io/pause-and-resume-wget-downloads/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/linux/wget.png&#34; alt=&#34;wget&#34; title=&#34;wget&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;There are many download managers to choose from to manage your downloads, but wget is arguably the best one. Wget is a linux command line utility to manage all types of downloads. Whenever you need to download any files of any size or need to use the ftp protocol, wget is an excellent choice. You can also use wget to get the file download size without actually downloading the file. This can come in handy to compare file sizes before downloading. Let me show you a few neat ways to use wget.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Install Xfce 4.14 on Xubuntu 18.04</title>
      <link>https://techstop.github.io/xfce-4-14-on-xubuntu-18-04/</link>
      <pubDate>Tue, 27 Aug 2019 21:18:59 -0400</pubDate>
      
      <guid>https://techstop.github.io/xfce-4-14-on-xubuntu-18-04/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/xfce/xfce.png&#34; alt=&#34;xfce&#34; title=&#34;xfce&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;After over 4 years of development, Xfce 4.14 was released on Aug 12, 2019. There were some major changes and improvements to xfce, most notably the switch from GTK2 to GTK3. This was the main reason for the long development period.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04.3 Release with Linux Kernel 5.0</title>
      <link>https://techstop.github.io/ubuntu-18-04-3-release/</link>
      <pubDate>Sat, 10 Aug 2019 15:17:49 -0400</pubDate>
      
      <guid>https://techstop.github.io/ubuntu-18-04-3-release/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/ubuntu/ubuntu.png&#34; alt=&#34;ubuntu&#34; title=&#34;ubuntu&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;The ubuntu flavours finally get the highly anticipated linux kernel 5.0. This new kernel brings performance improvements, bug fixes, and more hardware support. You also get an updated X.org and graphics drivers. The 18.04.3 point release was released on Aug 8th 2019.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Admob Tutorial</title>
      <link>https://techstop.github.io/admob-tutorial/</link>
      <pubDate>Thu, 07 Feb 2019 00:36:55 +0000</pubDate>
      
      <guid>https://techstop.github.io/admob-tutorial/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/admob-tutorial/admob-tutorial-0.png&#34; alt=&#34;Admob Tutorial&#34; title=&#34;Admob Tutorial&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/admob-tutorial/admob-tutorial-1.png&#34; alt=&#34;Admob Tutorial&#34; title=&#34;Admob Tutorial&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;In this Android Admob tutorial we will go over how to add admob to your android app. With admob you can monetize your app and make some income for your efforts. There are a few types of admob ad units that you can add to your app. For this admob tutorial we will be adding the Anchored Adaptive Banner which can display high performance adaptive banner ads for all devices and screen sizes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android WebView</title>
      <link>https://techstop.github.io/android-webview/</link>
      <pubDate>Mon, 04 Feb 2019 22:27:34 +0000</pubDate>
      
      <guid>https://techstop.github.io/android-webview/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/android-webview/android-webview-0.png&#34; alt=&#34;Android WebView&#34; title=&#34;Android WebView&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/android-webview/android-webview-1.png&#34; alt=&#34;Android WebView&#34; title=&#34;Android WebView&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;The Android WebView allows your app to open web pages within your app. For this Android WebView example we will create an android webview app that loads a couple web pages. We will be adding some attributes like JavaScript to interact with page elements and a DownloadListener for downloading items from download links on web pages as well as a ProgressBar to show page loading progress. We will also request runtime storage write permissions for our DownloadListener for android 6+.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Toolbar</title>
      <link>https://techstop.github.io/android-toolbar/</link>
      <pubDate>Mon, 21 Jan 2019 16:36:29 +0000</pubDate>
      
      <guid>https://techstop.github.io/android-toolbar/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/android-toolbar/android-toolbar-0.png&#34; alt=&#34;Android Toolbar&#34; title=&#34;Android Toolbar&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/android-toolbar/android-toolbar-1.png&#34; alt=&#34;Android Toolbar&#34; title=&#34;Android Toolbar&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Often times users are looking to create an Android Toolbar so they can customize it to their liking. In this tutorial we&amp;rsquo;ll go over how to create an Android custom Toolbar and show you a few modifications you can do to the Toolbar for your app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android BroadcastReceiver</title>
      <link>https://techstop.github.io/android-broadcastreceiver/</link>
      <pubDate>Sat, 19 Jan 2019 00:50:48 +0000</pubDate>
      
      <guid>https://techstop.github.io/android-broadcastreceiver/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/broadcastreceiver/android-broadcastreceiver.png&#34; alt=&#34;Android BroadcastReceiver&#34; title=&#34;Android BroadcastReceiver&#34;  width=&#34;100px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;Today we will be using an android &lt;strong&gt;BroadcastReceiver&lt;/strong&gt; and &lt;strong&gt;WorkManager&lt;/strong&gt; to run code on bootup in Android. There can be many reasons to run code on bootup. One good use case would be to set settings that a user has selected within your app on every bootup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Reduce Apk Size</title>
      <link>https://techstop.github.io/reduce-apk-size/</link>
      <pubDate>Sun, 25 Nov 2018 00:34:06 +0000</pubDate>
      
      <guid>https://techstop.github.io/reduce-apk-size/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/reduce-apk-size/How-To-Reduce-Apk-Size.png&#34; alt=&#34;How To Reduce Apk Size&#34; title=&#34;How To Reduce Apk Size&#34;  width=&#34;500px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;How to reduce apk size? A question often asked by new app developers when trying to figure out how to best optimize their app. As an app developer you should always optimize your app wherever you can to give your user base the best possible experience with your app. By well optimizing your app you&amp;rsquo;ll give your users a smooth experience throughout your apps&#39; UI along with a smaller foot print.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Get Android Mounts and Partition Images</title>
      <link>https://techstop.github.io/android-mounts-and-partition-images/</link>
      <pubDate>Thu, 22 Nov 2018 00:50:19 +0000</pubDate>
      
      <guid>https://techstop.github.io/android-mounts-and-partition-images/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/android-mounts/android-mounts-and-partition-images.png&#34; alt=&#34;How To Get Android Mounts and Partition Images&#34; title=&#34;How To Get Android Mounts and Partition Images&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;In this guide I will be showing you how to get the android mounts and partition images. There could be many reasons for needing the android mounts and partition images. A couple reasons that come to mind could be to make backups of your partitions in case you need to fix your phone from a bad flash later on. Or you might want to customize a boot.img or system.img to add in some custom features. Whatever your reason, just follow the guide and you&amp;rsquo;ll be pulling those partitions in no time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arc Dark Theme For Gedit</title>
      <link>https://techstop.github.io/arc-dark-theme-for-gedit/</link>
      <pubDate>Wed, 04 Jul 2018 20:18:44 +0000</pubDate>
      
      <guid>https://techstop.github.io/arc-dark-theme-for-gedit/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/arc-theme/arc-dark-theme-for-gedit-0.png&#34; alt=&#34;Arc Dark Theme For Gedit&#34; title=&#34;Arc Dark Theme For Gedit&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/arc-theme/arc-dark-theme-for-gedit-1.png&#34; alt=&#34;Arc Dark Theme For Gedit&#34; title=&#34;Arc Dark Theme For Gedit&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;If you like the dark version of the Arc Theme for your desktop environment and would like the theme for your text editor, then look no further. Here I have the Arc Dark Theme for Gedit. The arc dark theme will work with gedit and pluma or most other text editors that support themes. The download link can be found below with simple installation instructions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Open File as Root</title>
      <link>https://techstop.github.io/open-file-as-root/</link>
      <pubDate>Tue, 08 May 2018 22:33:30 +0000</pubDate>
      
      <guid>https://techstop.github.io/open-file-as-root/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/open-as-root/open-file-as-root-0.png&#34; alt=&#34;Open File as Root&#34; title=&#34;Open File as Root&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/open-as-root/open-file-as-root-1.png&#34; alt=&#34;Open File as Root&#34; title=&#34;Open File as Root&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;If you need to open file as root in linux you should never use sudo. Sudo can cause files and folders in your home directory to be owned by root. The key is to open files or folders with root privileges while maintaining user ownership. The proper way was to use gksu or gksudo which are the graphical variants of sudo. These prevented files and folders from being owned by root. Unfortunately gksu and gksudo are no longer included in the ubuntu family as of version 17.10 or any derivatives of ubuntu.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Install ADB On Linux</title>
      <link>https://techstop.github.io/install-adb-on-linux/</link>
      <pubDate>Mon, 07 May 2018 21:16:16 +0000</pubDate>
      
      <guid>https://techstop.github.io/install-adb-on-linux/</guid>
      <description>&lt;div class=&#34;myImgContainer&#34;&gt;
&lt;img class=&#34;myImg&#34; src=&#34;https://techstop.github.io/images/adb-linux/install_adb_on_linux.png&#34; alt=&#34;Install ADB On Linux&#34; title=&#34;Install ADB On Linux&#34;  width=&#34;150px&#34;&gt;
&lt;/div&gt;

&lt;div id=&#34;myModal&#34; class=&#34;modal&#34;&gt;
  &lt;span class=&#34;close&#34;&gt;&amp;times;&lt;/span&gt;
  &lt;img class=&#34;modal-content&#34; id=&#34;img01&#34;&gt;
  &lt;div id=&#34;caption&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
	
	var modal = document.getElementById(&#39;myModal&#39;);
	var i;
	
	var img = document.getElementsByClassName(&#39;myImg&#39;);
	var modalImg = document.getElementById(&#34;img01&#34;);
	var captionText = document.getElementById(&#34;caption&#34;);
	for(i = 0; i &lt; img.length; i++) {
		img[i].onclick = function() {
			modal.style.display = &#34;block&#34;;
			modalImg.src = this.src;
			captionText.innerHTML = this.alt;
		}
	}
	
	var span = document.getElementsByClassName(&#34;close&#34;)[0];

	
	span.onclick = function() { 
		modal.style.display = &#34;none&#34;;
	}
&lt;/script&gt;

&lt;p&gt;If you’re looking to install adb on Linux, but don’t want to install Android Studio then this guide is for you. Android Studio is a development environment for creating android apps, but it’s a large download and installation if all you need is adb and fastboot. Below is a guide to install just adb and fastboot which will be a very small download and quick installation.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
